// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Opss.PrimaryAuthorityRegister.Api.Persistence.Contexts;

#nullable disable

namespace Opss.PrimaryAuthorityRegister.Api.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250304155409_PartnershipApplications")]
    partial class PartnershipApplications
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorityRegulatoryFunction", b =>
                {
                    b.Property<Guid>("AuthoritiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegulatoryFunctionsId")
                        .HasColumnType("uuid");

                    b.HasKey("AuthoritiesId", "RegulatoryFunctionsId");

                    b.HasIndex("RegulatoryFunctionsId");

                    b.ToTable("AuthorityRegulatoryFunction");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.Authority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("Authority");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.AuthorityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UserIdentityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("UserIdentityId")
                        .IsUnique();

                    b.ToTable("AuthorityUser");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.PartnershipApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("PartnershipType")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityId");

                    b.ToTable("PartnershipApplication");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.RegulatoryFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("RegulatoryFunction");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.TestData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DuplicatedData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TestData");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.UserIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(320)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("UserIdentities");
                });

            modelBuilder.Entity("RoleUserIdentity", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserIdentitiesId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesId", "UserIdentitiesId");

                    b.HasIndex("UserIdentitiesId");

                    b.ToTable("RoleUserIdentity");
                });

            modelBuilder.Entity("AuthorityRegulatoryFunction", b =>
                {
                    b.HasOne("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.Authority", null)
                        .WithMany()
                        .HasForeignKey("AuthoritiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.RegulatoryFunction", null)
                        .WithMany()
                        .HasForeignKey("RegulatoryFunctionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.AuthorityUser", b =>
                {
                    b.HasOne("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.Authority", "Authority")
                        .WithMany("AuthorityUsers")
                        .HasForeignKey("AuthorityId");

                    b.HasOne("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.UserIdentity", "UserIdentity")
                        .WithOne("AuthorityUser")
                        .HasForeignKey("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.AuthorityUser", "UserIdentityId");

                    b.Navigation("Authority");

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.PartnershipApplication", b =>
                {
                    b.HasOne("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.Authority", "Authority")
                        .WithMany("PartnershipApplications")
                        .HasForeignKey("AuthorityId");

                    b.Navigation("Authority");
                });

            modelBuilder.Entity("RoleUserIdentity", b =>
                {
                    b.HasOne("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.UserIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserIdentitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.Authority", b =>
                {
                    b.Navigation("AuthorityUsers");

                    b.Navigation("PartnershipApplications");
                });

            modelBuilder.Entity("Opss.PrimaryAuthorityRegister.Api.Domain.Entities.UserIdentity", b =>
                {
                    b.Navigation("AuthorityUser");
                });
#pragma warning restore 612, 618
        }
    }
}
