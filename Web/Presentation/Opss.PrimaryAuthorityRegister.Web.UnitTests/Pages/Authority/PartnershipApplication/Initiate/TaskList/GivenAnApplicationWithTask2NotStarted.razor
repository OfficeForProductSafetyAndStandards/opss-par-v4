@using Opss.DesignSystem.Frontend.Blazor.Components.Classes
@using Opss.DesignSystem.Frontend.Blazor.Components.Shared
@using Opss.PrimaryAuthorityRegister.Cqrs.Services
@using Opss.PrimaryAuthorityRegister.Web.Application.Helpers
@using Opss.PrimaryAuthorityRegister.Web.Shared.Authority
@inherits BunitContext

@code {
	[Fact]
	public void ThenAddRegulatoryFunctionListIsRendered()
	{
		// Arrange
		var mockQueryHelper = new Mock<IQueryHelper>();
		mockQueryHelper.Setup(h => h.ParseQuery(It.IsAny<string>()))
		.Returns(() => new Dictionary<string, Microsoft.Extensions.Primitives.StringValues>
		{
			{ "applicationId", Guid.NewGuid().ToString()}
		});
		Services.AddSingleton(mockQueryHelper.Object);
		Services.AddLocalization();
		var navMan = Services.GetRequiredService<NavigationManager>();

		ComponentFactories.AddStub<MyLocalAuthoirtyName>();
		ComponentFactories.AddStub<MyOfferedRegulatoryFunctionsTags>();

		var page = Render<Web.Pages.Authority.PartnershipApplication.Initiate.TaskList>();
		var taskLink = page.FindByDataTestId("add-regulatory-function-contacts-link");
		var taskTag = page.FindByDataTestId("add-regulatory-function-contacts-status-tag");

		var href = taskLink.Attributes["href"];
		Assert.Equal("/authority/partnership-application/initiate/regulatory-function-contacts/list", href?.Value);
		var disabled = taskLink.Attributes["disabled"];
		Assert.Null(disabled);

		var classes = taskTag.Attributes["class"];
		Assert.Contains(TagClasses.Blue, classes?.Value);
		Assert.Equal("Not_Yet_Started", taskTag.InnerHtml);
	}
}
