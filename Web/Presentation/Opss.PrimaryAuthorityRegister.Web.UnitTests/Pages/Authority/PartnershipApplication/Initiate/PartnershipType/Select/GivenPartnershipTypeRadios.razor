@using Opss.PrimaryAuthorityRegister.Common.Constants
@using Opss.PrimaryAuthorityRegister.Cqrs.Requests.PartnershipApplication.Commands
@using Opss.PrimaryAuthorityRegister.Cqrs.Services
@using Opss.PrimaryAuthorityRegister.Http
@using Opss.PrimaryAuthorityRegister.Http.Entities
@using System.Net.Http
@using System.Net
@using Opss.PrimaryAuthorityRegister.Http.Problem
@inherits BunitContext

@code {
	const string tasklistUrl = "/authority/partnership-application/initiate/task-list";

	[Fact]
	public void WhenPartnershipTypeNotSelected_ThenErrorMessageIsShown_AndThenDoesNotNavigateToTaskList()
	{
		// Arrange
		var mockCqrs = new Mock<ICqrsService>();
		Services.AddScoped<ICqrsService>((p) => mockCqrs.Object);
		Services.AddLocalization();
		var navigationManager = Services.GetRequiredService<NavigationManager>();
		var page = Render<Web.Pages.Authority.PartnershipApplication.Initiate.PartnershipType.Select>();

		// Act
		var continueButton = page.FindByDataTestId("continue-button");
		continueButton.Click();

		// Assert
		Assert.DoesNotContain(tasklistUrl, navigationManager.Uri);
		page
		.FindByDataTestId("error-summary")
		.MarkupMatches(
	@<div class="govuk-error-summary" data-module="govuk-error-summary" data-testid="error-summary">
		<div role="alert">
			<h2 class="govuk-error-summary__title">There is a problem</h2>
			<div class="govuk-error-summary__body">
				<ul class="govuk-list govuk-error-summary__list">
					<li data-testid="partnership-type-error-summary">
						<a href="#partnership-type">Partnership_Type_Error_Text</a>
					</li>
				</ul>
			</div>
		</div>
	</div>);

		page
		.FindByDataTestId("partnership-type-error-message")
		.MarkupMatches(
	@<p id="partnership-type-error" class="govuk-error-message" data-testid="partnership-type-error-message">
		<span class="govuk-visually-hidden">Error:</span>Partnership_Type_Error_Text
	</p>
	);
	}

	[Theory]
	[InlineData(PartnershipConstants.PartnershipType.Direct)]
	[InlineData(PartnershipConstants.PartnershipType.Coordinated)]
	public async Task WhenPartnershipTypeSelected_ThenCreatePartnershipCommandIsExecuted_AndRedirectsToTaskList(string partnershipType)
	{
		// Arrange
		var mockCqrs = new Mock<ICqrsService>(MockBehavior.Strict);
		var expectedCommand = new CreatePartnershipApplicationCommand(partnershipType);
		var createdResponse = new CreatedResponse() { Id = Guid.NewGuid() };

		mockCqrs
			.Setup(h => h.PostAsync(It.IsAny<CreatePartnershipApplicationCommand>()))
			.ReturnsAsync(new HttpObjectResponse<CreatedResponse>(
					new HttpResponseMessage(System.Net.HttpStatusCode.OK), createdResponse));
		Services.AddScoped<ICqrsService>((p) => mockCqrs.Object);
		Services.AddLocalization();

		var navigationManager = Services.GetRequiredService<NavigationManager>();
		var page = Render<Web.Pages.Authority.PartnershipApplication.Initiate.PartnershipType.Select>();
		var radio = page.FindByDataTestId($"partnership-type-{partnershipType.ToLower()}-radio");
		var continueButton = page.FindByDataTestId("continue-button");

		// Act
		await radio.InputAsync(new() { Value = true });

		await continueButton.ClickAsync(new MouseEventArgs());

		// Assert
		Assert.Throws<Bunit.ElementNotFoundException>(() =>
		{
			var element = page.FindByDataTestId("error-summary");
		});

		Assert.Throws<Bunit.ElementNotFoundException>(() =>
		{
			var element = page.FindByDataTestId("partnership-type-error-message");
		});

		mockCqrs.Verify(c => c.PostAsync(It.Is<CreatePartnershipApplicationCommand>(t => t.PartnershipType == partnershipType)), Times.Once);
		Assert.EndsWith(tasklistUrl + "?applicationId=" + createdResponse.Id.ToString(), navigationManager.Uri);
	}
}
